// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"web-stash-api/ent/bag"
	"web-stash-api/ent/bagitem"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BagItem is the model entity for the BagItem schema.
type BagItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BagItemQuery when eager-loading is set.
	Edges     BagItemEdges `json:"edges"`
	bag_items *uuid.UUID
}

// BagItemEdges holds the relations/edges for other nodes in the graph.
type BagItemEdges struct {
	// Bag holds the value of the bag edge.
	Bag *Bag `json:"bag,omitempty"`
	// SubItems holds the value of the sub_items edge.
	SubItems []*SubItem `json:"sub_items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BagOrErr returns the Bag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BagItemEdges) BagOrErr() (*Bag, error) {
	if e.loadedTypes[0] {
		if e.Bag == nil {
			// The edge bag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bag.Label}
		}
		return e.Bag, nil
	}
	return nil, &NotLoadedError{edge: "bag"}
}

// SubItemsOrErr returns the SubItems value or an error if the edge
// was not loaded in eager-loading.
func (e BagItemEdges) SubItemsOrErr() ([]*SubItem, error) {
	if e.loadedTypes[1] {
		return e.SubItems, nil
	}
	return nil, &NotLoadedError{edge: "sub_items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BagItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bagitem.FieldName, bagitem.FieldDescription, bagitem.FieldIcon, bagitem.FieldLink, bagitem.FieldImage:
			values[i] = &sql.NullString{}
		case bagitem.FieldID:
			values[i] = &uuid.UUID{}
		case bagitem.ForeignKeys[0]: // bag_items
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BagItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BagItem fields.
func (bi *BagItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bagitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bi.ID = *value
			}
		case bagitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bi.Name = value.String
			}
		case bagitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bi.Description = value.String
			}
		case bagitem.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				bi.Icon = value.String
			}
		case bagitem.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				bi.Link = value.String
			}
		case bagitem.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				bi.Image = value.String
			}
		case bagitem.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field bag_items", values[i])
			} else if value != nil {
				bi.bag_items = value
			}
		}
	}
	return nil
}

// QueryBag queries the "bag" edge of the BagItem entity.
func (bi *BagItem) QueryBag() *BagQuery {
	return (&BagItemClient{config: bi.config}).QueryBag(bi)
}

// QuerySubItems queries the "sub_items" edge of the BagItem entity.
func (bi *BagItem) QuerySubItems() *SubItemQuery {
	return (&BagItemClient{config: bi.config}).QuerySubItems(bi)
}

// Update returns a builder for updating this BagItem.
// Note that you need to call BagItem.Unwrap() before calling this method if this BagItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BagItem) Update() *BagItemUpdateOne {
	return (&BagItemClient{config: bi.config}).UpdateOne(bi)
}

// Unwrap unwraps the BagItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BagItem) Unwrap() *BagItem {
	tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BagItem is not a transactional entity")
	}
	bi.config.driver = tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BagItem) String() string {
	var builder strings.Builder
	builder.WriteString("BagItem(")
	builder.WriteString(fmt.Sprintf("id=%v", bi.ID))
	builder.WriteString(", name=")
	builder.WriteString(bi.Name)
	builder.WriteString(", description=")
	builder.WriteString(bi.Description)
	builder.WriteString(", icon=")
	builder.WriteString(bi.Icon)
	builder.WriteString(", link=")
	builder.WriteString(bi.Link)
	builder.WriteString(", image=")
	builder.WriteString(bi.Image)
	builder.WriteByte(')')
	return builder.String()
}

// BagItems is a parsable slice of BagItem.
type BagItems []*BagItem

func (bi BagItems) config(cfg config) {
	for _i := range bi {
		bi[_i].config = cfg
	}
}
