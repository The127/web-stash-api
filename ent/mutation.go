// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"web-stash-api/ent/bag"
	"web-stash-api/ent/bagitem"
	"web-stash-api/ent/predicate"
	"web-stash-api/ent/share"
	"web-stash-api/ent/subitem"

	"entgo.io/ent"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBag     = "Bag"
	TypeBagItem = "BagItem"
	TypeShare   = "Share"
	TypeSubItem = "SubItem"
)

// BagMutation represents an operation that mutates the Bag nodes in the graph.
type BagMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	icon          *string
	user_id       *uuid.UUID
	clearedFields map[string]struct{}
	items         map[uuid.UUID]struct{}
	removeditems  map[uuid.UUID]struct{}
	cleareditems  bool
	done          bool
	oldValue      func(context.Context) (*Bag, error)
	predicates    []predicate.Bag
}

var _ ent.Mutation = (*BagMutation)(nil)

// bagOption allows management of the mutation configuration using functional options.
type bagOption func(*BagMutation)

// newBagMutation creates new mutation for the Bag entity.
func newBagMutation(c config, op Op, opts ...bagOption) *BagMutation {
	m := &BagMutation{
		config:        c,
		op:            op,
		typ:           TypeBag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBagID sets the ID field of the mutation.
func withBagID(id uuid.UUID) bagOption {
	return func(m *BagMutation) {
		var (
			err   error
			once  sync.Once
			value *Bag
		)
		m.oldValue = func(ctx context.Context) (*Bag, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBag sets the old Bag of the mutation.
func withBag(node *Bag) bagOption {
	return func(m *BagMutation) {
		m.oldValue = func(context.Context) (*Bag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bag entities.
func (m *BagMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *BagMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *BagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Bag entity.
// If the Bag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BagMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *BagMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *BagMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the Bag entity.
// If the Bag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *BagMutation) ResetIcon() {
	m.icon = nil
}

// SetUserID sets the "user_id" field.
func (m *BagMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BagMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Bag entity.
// If the Bag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BagMutation) ResetUserID() {
	m.user_id = nil
}

// AddItemIDs adds the "items" edge to the BagItem entity by ids.
func (m *BagMutation) AddItemIDs(ids ...uuid.UUID) {
	if m.items == nil {
		m.items = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the BagItem entity.
func (m *BagMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared returns if the "items" edge to the BagItem entity was cleared.
func (m *BagMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the BagItem entity by IDs.
func (m *BagMutation) RemoveItemIDs(ids ...uuid.UUID) {
	if m.removeditems == nil {
		m.removeditems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the BagItem entity.
func (m *BagMutation) RemovedItemsIDs() (ids []uuid.UUID) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *BagMutation) ItemsIDs() (ids []uuid.UUID) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *BagMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// Op returns the operation name.
func (m *BagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bag).
func (m *BagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BagMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, bag.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, bag.FieldIcon)
	}
	if m.user_id != nil {
		fields = append(fields, bag.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bag.FieldName:
		return m.Name()
	case bag.FieldIcon:
		return m.Icon()
	case bag.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bag.FieldName:
		return m.OldName(ctx)
	case bag.FieldIcon:
		return m.OldIcon(ctx)
	case bag.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Bag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case bag.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case bag.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Bag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BagMutation) ResetField(name string) error {
	switch name {
	case bag.FieldName:
		m.ResetName()
		return nil
	case bag.FieldIcon:
		m.ResetIcon()
		return nil
	case bag.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Bag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.items != nil {
		edges = append(edges, bag.EdgeItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bag.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeditems != nil {
		edges = append(edges, bag.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bag.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditems {
		edges = append(edges, bag.EdgeItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BagMutation) EdgeCleared(name string) bool {
	switch name {
	case bag.EdgeItems:
		return m.cleareditems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BagMutation) ResetEdge(name string) error {
	switch name {
	case bag.EdgeItems:
		m.ResetItems()
		return nil
	}
	return fmt.Errorf("unknown Bag edge %s", name)
}

// BagItemMutation represents an operation that mutates the BagItem nodes in the graph.
type BagItemMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	name             *string
	description      *string
	icon             *string
	link             *string
	image            *string
	clearedFields    map[string]struct{}
	bag              *uuid.UUID
	clearedbag       bool
	sub_items        map[uuid.UUID]struct{}
	removedsub_items map[uuid.UUID]struct{}
	clearedsub_items bool
	done             bool
	oldValue         func(context.Context) (*BagItem, error)
	predicates       []predicate.BagItem
}

var _ ent.Mutation = (*BagItemMutation)(nil)

// bagitemOption allows management of the mutation configuration using functional options.
type bagitemOption func(*BagItemMutation)

// newBagItemMutation creates new mutation for the BagItem entity.
func newBagItemMutation(c config, op Op, opts ...bagitemOption) *BagItemMutation {
	m := &BagItemMutation{
		config:        c,
		op:            op,
		typ:           TypeBagItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBagItemID sets the ID field of the mutation.
func withBagItemID(id uuid.UUID) bagitemOption {
	return func(m *BagItemMutation) {
		var (
			err   error
			once  sync.Once
			value *BagItem
		)
		m.oldValue = func(ctx context.Context) (*BagItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BagItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBagItem sets the old BagItem of the mutation.
func withBagItem(node *BagItem) bagitemOption {
	return func(m *BagItemMutation) {
		m.oldValue = func(context.Context) (*BagItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BagItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BagItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BagItem entities.
func (m *BagItemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *BagItemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *BagItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BagItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the BagItem entity.
// If the BagItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BagItemMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *BagItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *BagItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the BagItem entity.
// If the BagItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *BagItemMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[bagitem.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *BagItemMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[bagitem.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *BagItemMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, bagitem.FieldDescription)
}

// SetIcon sets the "icon" field.
func (m *BagItemMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *BagItemMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the BagItem entity.
// If the BagItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagItemMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *BagItemMutation) ResetIcon() {
	m.icon = nil
}

// SetLink sets the "link" field.
func (m *BagItemMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *BagItemMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the BagItem entity.
// If the BagItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagItemMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *BagItemMutation) ResetLink() {
	m.link = nil
}

// SetImage sets the "image" field.
func (m *BagItemMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *BagItemMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the BagItem entity.
// If the BagItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BagItemMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *BagItemMutation) ResetImage() {
	m.image = nil
}

// SetBagID sets the "bag" edge to the Bag entity by id.
func (m *BagItemMutation) SetBagID(id uuid.UUID) {
	m.bag = &id
}

// ClearBag clears the "bag" edge to the Bag entity.
func (m *BagItemMutation) ClearBag() {
	m.clearedbag = true
}

// BagCleared returns if the "bag" edge to the Bag entity was cleared.
func (m *BagItemMutation) BagCleared() bool {
	return m.clearedbag
}

// BagID returns the "bag" edge ID in the mutation.
func (m *BagItemMutation) BagID() (id uuid.UUID, exists bool) {
	if m.bag != nil {
		return *m.bag, true
	}
	return
}

// BagIDs returns the "bag" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BagID instead. It exists only for internal usage by the builders.
func (m *BagItemMutation) BagIDs() (ids []uuid.UUID) {
	if id := m.bag; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBag resets all changes to the "bag" edge.
func (m *BagItemMutation) ResetBag() {
	m.bag = nil
	m.clearedbag = false
}

// AddSubItemIDs adds the "sub_items" edge to the SubItem entity by ids.
func (m *BagItemMutation) AddSubItemIDs(ids ...uuid.UUID) {
	if m.sub_items == nil {
		m.sub_items = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sub_items[ids[i]] = struct{}{}
	}
}

// ClearSubItems clears the "sub_items" edge to the SubItem entity.
func (m *BagItemMutation) ClearSubItems() {
	m.clearedsub_items = true
}

// SubItemsCleared returns if the "sub_items" edge to the SubItem entity was cleared.
func (m *BagItemMutation) SubItemsCleared() bool {
	return m.clearedsub_items
}

// RemoveSubItemIDs removes the "sub_items" edge to the SubItem entity by IDs.
func (m *BagItemMutation) RemoveSubItemIDs(ids ...uuid.UUID) {
	if m.removedsub_items == nil {
		m.removedsub_items = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedsub_items[ids[i]] = struct{}{}
	}
}

// RemovedSubItems returns the removed IDs of the "sub_items" edge to the SubItem entity.
func (m *BagItemMutation) RemovedSubItemsIDs() (ids []uuid.UUID) {
	for id := range m.removedsub_items {
		ids = append(ids, id)
	}
	return
}

// SubItemsIDs returns the "sub_items" edge IDs in the mutation.
func (m *BagItemMutation) SubItemsIDs() (ids []uuid.UUID) {
	for id := range m.sub_items {
		ids = append(ids, id)
	}
	return
}

// ResetSubItems resets all changes to the "sub_items" edge.
func (m *BagItemMutation) ResetSubItems() {
	m.sub_items = nil
	m.clearedsub_items = false
	m.removedsub_items = nil
}

// Op returns the operation name.
func (m *BagItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BagItem).
func (m *BagItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BagItemMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, bagitem.FieldName)
	}
	if m.description != nil {
		fields = append(fields, bagitem.FieldDescription)
	}
	if m.icon != nil {
		fields = append(fields, bagitem.FieldIcon)
	}
	if m.link != nil {
		fields = append(fields, bagitem.FieldLink)
	}
	if m.image != nil {
		fields = append(fields, bagitem.FieldImage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BagItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bagitem.FieldName:
		return m.Name()
	case bagitem.FieldDescription:
		return m.Description()
	case bagitem.FieldIcon:
		return m.Icon()
	case bagitem.FieldLink:
		return m.Link()
	case bagitem.FieldImage:
		return m.Image()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BagItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bagitem.FieldName:
		return m.OldName(ctx)
	case bagitem.FieldDescription:
		return m.OldDescription(ctx)
	case bagitem.FieldIcon:
		return m.OldIcon(ctx)
	case bagitem.FieldLink:
		return m.OldLink(ctx)
	case bagitem.FieldImage:
		return m.OldImage(ctx)
	}
	return nil, fmt.Errorf("unknown BagItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BagItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bagitem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case bagitem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case bagitem.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case bagitem.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case bagitem.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	}
	return fmt.Errorf("unknown BagItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BagItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BagItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BagItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BagItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BagItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bagitem.FieldDescription) {
		fields = append(fields, bagitem.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BagItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BagItemMutation) ClearField(name string) error {
	switch name {
	case bagitem.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown BagItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BagItemMutation) ResetField(name string) error {
	switch name {
	case bagitem.FieldName:
		m.ResetName()
		return nil
	case bagitem.FieldDescription:
		m.ResetDescription()
		return nil
	case bagitem.FieldIcon:
		m.ResetIcon()
		return nil
	case bagitem.FieldLink:
		m.ResetLink()
		return nil
	case bagitem.FieldImage:
		m.ResetImage()
		return nil
	}
	return fmt.Errorf("unknown BagItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BagItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.bag != nil {
		edges = append(edges, bagitem.EdgeBag)
	}
	if m.sub_items != nil {
		edges = append(edges, bagitem.EdgeSubItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BagItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bagitem.EdgeBag:
		if id := m.bag; id != nil {
			return []ent.Value{*id}
		}
	case bagitem.EdgeSubItems:
		ids := make([]ent.Value, 0, len(m.sub_items))
		for id := range m.sub_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BagItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsub_items != nil {
		edges = append(edges, bagitem.EdgeSubItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BagItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bagitem.EdgeSubItems:
		ids := make([]ent.Value, 0, len(m.removedsub_items))
		for id := range m.removedsub_items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BagItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbag {
		edges = append(edges, bagitem.EdgeBag)
	}
	if m.clearedsub_items {
		edges = append(edges, bagitem.EdgeSubItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BagItemMutation) EdgeCleared(name string) bool {
	switch name {
	case bagitem.EdgeBag:
		return m.clearedbag
	case bagitem.EdgeSubItems:
		return m.clearedsub_items
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BagItemMutation) ClearEdge(name string) error {
	switch name {
	case bagitem.EdgeBag:
		m.ClearBag()
		return nil
	}
	return fmt.Errorf("unknown BagItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BagItemMutation) ResetEdge(name string) error {
	switch name {
	case bagitem.EdgeBag:
		m.ResetBag()
		return nil
	case bagitem.EdgeSubItems:
		m.ResetSubItems()
		return nil
	}
	return fmt.Errorf("unknown BagItem edge %s", name)
}

// ShareMutation represents an operation that mutates the Share nodes in the graph.
type ShareMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	user_id       *uuid.UUID
	item_id       *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Share, error)
	predicates    []predicate.Share
}

var _ ent.Mutation = (*ShareMutation)(nil)

// shareOption allows management of the mutation configuration using functional options.
type shareOption func(*ShareMutation)

// newShareMutation creates new mutation for the Share entity.
func newShareMutation(c config, op Op, opts ...shareOption) *ShareMutation {
	m := &ShareMutation{
		config:        c,
		op:            op,
		typ:           TypeShare,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShareID sets the ID field of the mutation.
func withShareID(id uuid.UUID) shareOption {
	return func(m *ShareMutation) {
		var (
			err   error
			once  sync.Once
			value *Share
		)
		m.oldValue = func(ctx context.Context) (*Share, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Share.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShare sets the old Share of the mutation.
func withShare(node *Share) shareOption {
	return func(m *ShareMutation) {
		m.oldValue = func(context.Context) (*Share, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShareMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShareMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Share entities.
func (m *ShareMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ShareMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *ShareMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ShareMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Share entity.
// If the Share object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShareMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ShareMutation) ResetUserID() {
	m.user_id = nil
}

// SetItemID sets the "item_id" field.
func (m *ShareMutation) SetItemID(u uuid.UUID) {
	m.item_id = &u
}

// ItemID returns the value of the "item_id" field in the mutation.
func (m *ShareMutation) ItemID() (r uuid.UUID, exists bool) {
	v := m.item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldItemID returns the old "item_id" field's value of the Share entity.
// If the Share object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShareMutation) OldItemID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemID: %w", err)
	}
	return oldValue.ItemID, nil
}

// ResetItemID resets all changes to the "item_id" field.
func (m *ShareMutation) ResetItemID() {
	m.item_id = nil
}

// Op returns the operation name.
func (m *ShareMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Share).
func (m *ShareMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShareMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user_id != nil {
		fields = append(fields, share.FieldUserID)
	}
	if m.item_id != nil {
		fields = append(fields, share.FieldItemID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShareMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case share.FieldUserID:
		return m.UserID()
	case share.FieldItemID:
		return m.ItemID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShareMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case share.FieldUserID:
		return m.OldUserID(ctx)
	case share.FieldItemID:
		return m.OldItemID(ctx)
	}
	return nil, fmt.Errorf("unknown Share field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShareMutation) SetField(name string, value ent.Value) error {
	switch name {
	case share.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case share.FieldItemID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemID(v)
		return nil
	}
	return fmt.Errorf("unknown Share field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShareMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShareMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShareMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Share numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShareMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShareMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShareMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Share nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShareMutation) ResetField(name string) error {
	switch name {
	case share.FieldUserID:
		m.ResetUserID()
		return nil
	case share.FieldItemID:
		m.ResetItemID()
		return nil
	}
	return fmt.Errorf("unknown Share field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShareMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShareMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShareMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShareMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShareMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShareMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShareMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Share unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShareMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Share edge %s", name)
}

// SubItemMutation represents an operation that mutates the SubItem nodes in the graph.
type SubItemMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	description   *string
	icon          *string
	link          *string
	clearedFields map[string]struct{}
	parent        *uuid.UUID
	clearedparent bool
	done          bool
	oldValue      func(context.Context) (*SubItem, error)
	predicates    []predicate.SubItem
}

var _ ent.Mutation = (*SubItemMutation)(nil)

// subitemOption allows management of the mutation configuration using functional options.
type subitemOption func(*SubItemMutation)

// newSubItemMutation creates new mutation for the SubItem entity.
func newSubItemMutation(c config, op Op, opts ...subitemOption) *SubItemMutation {
	m := &SubItemMutation{
		config:        c,
		op:            op,
		typ:           TypeSubItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubItemID sets the ID field of the mutation.
func withSubItemID(id uuid.UUID) subitemOption {
	return func(m *SubItemMutation) {
		var (
			err   error
			once  sync.Once
			value *SubItem
		)
		m.oldValue = func(ctx context.Context) (*SubItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubItem sets the old SubItem of the mutation.
func withSubItem(node *SubItem) subitemOption {
	return func(m *SubItemMutation) {
		m.oldValue = func(context.Context) (*SubItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubItem entities.
func (m *SubItemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *SubItemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *SubItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SubItem entity.
// If the SubItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubItemMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *SubItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SubItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SubItem entity.
// If the SubItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *SubItemMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[subitem.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *SubItemMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[subitem.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *SubItemMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, subitem.FieldDescription)
}

// SetIcon sets the "icon" field.
func (m *SubItemMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *SubItemMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the SubItem entity.
// If the SubItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubItemMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *SubItemMutation) ResetIcon() {
	m.icon = nil
}

// SetLink sets the "link" field.
func (m *SubItemMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *SubItemMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the SubItem entity.
// If the SubItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubItemMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *SubItemMutation) ResetLink() {
	m.link = nil
}

// SetParentID sets the "parent" edge to the BagItem entity by id.
func (m *SubItemMutation) SetParentID(id uuid.UUID) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the BagItem entity.
func (m *SubItemMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared returns if the "parent" edge to the BagItem entity was cleared.
func (m *SubItemMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *SubItemMutation) ParentID() (id uuid.UUID, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *SubItemMutation) ParentIDs() (ids []uuid.UUID) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *SubItemMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Op returns the operation name.
func (m *SubItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SubItem).
func (m *SubItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubItemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, subitem.FieldName)
	}
	if m.description != nil {
		fields = append(fields, subitem.FieldDescription)
	}
	if m.icon != nil {
		fields = append(fields, subitem.FieldIcon)
	}
	if m.link != nil {
		fields = append(fields, subitem.FieldLink)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subitem.FieldName:
		return m.Name()
	case subitem.FieldDescription:
		return m.Description()
	case subitem.FieldIcon:
		return m.Icon()
	case subitem.FieldLink:
		return m.Link()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subitem.FieldName:
		return m.OldName(ctx)
	case subitem.FieldDescription:
		return m.OldDescription(ctx)
	case subitem.FieldIcon:
		return m.OldIcon(ctx)
	case subitem.FieldLink:
		return m.OldLink(ctx)
	}
	return nil, fmt.Errorf("unknown SubItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subitem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case subitem.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case subitem.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case subitem.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	}
	return fmt.Errorf("unknown SubItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subitem.FieldDescription) {
		fields = append(fields, subitem.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubItemMutation) ClearField(name string) error {
	switch name {
	case subitem.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown SubItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubItemMutation) ResetField(name string) error {
	switch name {
	case subitem.FieldName:
		m.ResetName()
		return nil
	case subitem.FieldDescription:
		m.ResetDescription()
		return nil
	case subitem.FieldIcon:
		m.ResetIcon()
		return nil
	case subitem.FieldLink:
		m.ResetLink()
		return nil
	}
	return fmt.Errorf("unknown SubItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.parent != nil {
		edges = append(edges, subitem.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subitem.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparent {
		edges = append(edges, subitem.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubItemMutation) EdgeCleared(name string) bool {
	switch name {
	case subitem.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubItemMutation) ClearEdge(name string) error {
	switch name {
	case subitem.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown SubItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubItemMutation) ResetEdge(name string) error {
	switch name {
	case subitem.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown SubItem edge %s", name)
}
