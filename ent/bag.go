// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"web-stash-api/ent/bag"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Bag is the model entity for the Bag schema.
type Bag struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BagQuery when eager-loading is set.
	Edges BagEdges `json:"edges"`
}

// BagEdges holds the relations/edges for other nodes in the graph.
type BagEdges struct {
	// Items holds the value of the items edge.
	Items []*BagItem `json:"items,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e BagEdges) ItemsOrErr() ([]*BagItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bag.FieldName, bag.FieldIcon:
			values[i] = &sql.NullString{}
		case bag.FieldID, bag.FieldUserID:
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bag fields.
func (b *Bag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bag.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bag.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				b.Icon = value.String
			}
		case bag.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				b.UserID = *value
			}
		}
	}
	return nil
}

// QueryItems queries the "items" edge of the Bag entity.
func (b *Bag) QueryItems() *BagItemQuery {
	return (&BagClient{config: b.config}).QueryItems(b)
}

// Update returns a builder for updating this Bag.
// Note that you need to call Bag.Unwrap() before calling this method if this Bag
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bag) Update() *BagUpdateOne {
	return (&BagClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Bag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bag) Unwrap() *Bag {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bag is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bag) String() string {
	var builder strings.Builder
	builder.WriteString("Bag(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", icon=")
	builder.WriteString(b.Icon)
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", b.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Bags is a parsable slice of Bag.
type Bags []*Bag

func (b Bags) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
