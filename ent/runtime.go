// Code generated by entc, DO NOT EDIT.

package ent

import (
	"web-stash-api/ent/bag"
	"web-stash-api/ent/bagitem"
	"web-stash-api/ent/schema"
	"web-stash-api/ent/share"
	"web-stash-api/ent/subitem"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bagFields := schema.Bag{}.Fields()
	_ = bagFields
	// bagDescName is the schema descriptor for name field.
	bagDescName := bagFields[1].Descriptor()
	// bag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	bag.NameValidator = func() func(string) error {
		validators := bagDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bagDescIcon is the schema descriptor for icon field.
	bagDescIcon := bagFields[2].Descriptor()
	// bag.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	bag.IconValidator = func() func(string) error {
		validators := bagDescIcon.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(icon string) error {
			for _, fn := range fns {
				if err := fn(icon); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bagDescID is the schema descriptor for id field.
	bagDescID := bagFields[0].Descriptor()
	// bag.DefaultID holds the default value on creation for the id field.
	bag.DefaultID = bagDescID.Default.(func() uuid.UUID)
	bagitemFields := schema.BagItem{}.Fields()
	_ = bagitemFields
	// bagitemDescName is the schema descriptor for name field.
	bagitemDescName := bagitemFields[1].Descriptor()
	// bagitem.NameValidator is a validator for the "name" field. It is called by the builders before save.
	bagitem.NameValidator = func() func(string) error {
		validators := bagitemDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bagitemDescIcon is the schema descriptor for icon field.
	bagitemDescIcon := bagitemFields[3].Descriptor()
	// bagitem.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	bagitem.IconValidator = bagitemDescIcon.Validators[0].(func(string) error)
	// bagitemDescLink is the schema descriptor for link field.
	bagitemDescLink := bagitemFields[4].Descriptor()
	// bagitem.LinkValidator is a validator for the "link" field. It is called by the builders before save.
	bagitem.LinkValidator = bagitemDescLink.Validators[0].(func(string) error)
	// bagitemDescImage is the schema descriptor for image field.
	bagitemDescImage := bagitemFields[5].Descriptor()
	// bagitem.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	bagitem.ImageValidator = bagitemDescImage.Validators[0].(func(string) error)
	// bagitemDescID is the schema descriptor for id field.
	bagitemDescID := bagitemFields[0].Descriptor()
	// bagitem.DefaultID holds the default value on creation for the id field.
	bagitem.DefaultID = bagitemDescID.Default.(func() uuid.UUID)
	shareFields := schema.Share{}.Fields()
	_ = shareFields
	// shareDescID is the schema descriptor for id field.
	shareDescID := shareFields[0].Descriptor()
	// share.DefaultID holds the default value on creation for the id field.
	share.DefaultID = shareDescID.Default.(func() uuid.UUID)
	subitemFields := schema.SubItem{}.Fields()
	_ = subitemFields
	// subitemDescName is the schema descriptor for name field.
	subitemDescName := subitemFields[1].Descriptor()
	// subitem.NameValidator is a validator for the "name" field. It is called by the builders before save.
	subitem.NameValidator = func() func(string) error {
		validators := subitemDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// subitemDescIcon is the schema descriptor for icon field.
	subitemDescIcon := subitemFields[3].Descriptor()
	// subitem.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	subitem.IconValidator = subitemDescIcon.Validators[0].(func(string) error)
	// subitemDescLink is the schema descriptor for link field.
	subitemDescLink := subitemFields[4].Descriptor()
	// subitem.LinkValidator is a validator for the "link" field. It is called by the builders before save.
	subitem.LinkValidator = subitemDescLink.Validators[0].(func(string) error)
	// subitemDescID is the schema descriptor for id field.
	subitemDescID := subitemFields[0].Descriptor()
	// subitem.DefaultID holds the default value on creation for the id field.
	subitem.DefaultID = subitemDescID.Default.(func() uuid.UUID)
}
