// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"web-stash-api/ent/bagitem"
	"web-stash-api/ent/subitem"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubItemCreate is the builder for creating a SubItem entity.
type SubItemCreate struct {
	config
	mutation *SubItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sic *SubItemCreate) SetName(s string) *SubItemCreate {
	sic.mutation.SetName(s)
	return sic
}

// SetDescription sets the "description" field.
func (sic *SubItemCreate) SetDescription(s string) *SubItemCreate {
	sic.mutation.SetDescription(s)
	return sic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sic *SubItemCreate) SetNillableDescription(s *string) *SubItemCreate {
	if s != nil {
		sic.SetDescription(*s)
	}
	return sic
}

// SetIcon sets the "icon" field.
func (sic *SubItemCreate) SetIcon(s string) *SubItemCreate {
	sic.mutation.SetIcon(s)
	return sic
}

// SetLink sets the "link" field.
func (sic *SubItemCreate) SetLink(s string) *SubItemCreate {
	sic.mutation.SetLink(s)
	return sic
}

// SetID sets the "id" field.
func (sic *SubItemCreate) SetID(u uuid.UUID) *SubItemCreate {
	sic.mutation.SetID(u)
	return sic
}

// SetParentID sets the "parent" edge to the BagItem entity by ID.
func (sic *SubItemCreate) SetParentID(id uuid.UUID) *SubItemCreate {
	sic.mutation.SetParentID(id)
	return sic
}

// SetNillableParentID sets the "parent" edge to the BagItem entity by ID if the given value is not nil.
func (sic *SubItemCreate) SetNillableParentID(id *uuid.UUID) *SubItemCreate {
	if id != nil {
		sic = sic.SetParentID(*id)
	}
	return sic
}

// SetParent sets the "parent" edge to the BagItem entity.
func (sic *SubItemCreate) SetParent(b *BagItem) *SubItemCreate {
	return sic.SetParentID(b.ID)
}

// Mutation returns the SubItemMutation object of the builder.
func (sic *SubItemCreate) Mutation() *SubItemMutation {
	return sic.mutation
}

// Save creates the SubItem in the database.
func (sic *SubItemCreate) Save(ctx context.Context) (*SubItem, error) {
	var (
		err  error
		node *SubItem
	)
	sic.defaults()
	if len(sic.hooks) == 0 {
		if err = sic.check(); err != nil {
			return nil, err
		}
		node, err = sic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sic.check(); err != nil {
				return nil, err
			}
			sic.mutation = mutation
			node, err = sic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sic.hooks) - 1; i >= 0; i-- {
			mut = sic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sic *SubItemCreate) SaveX(ctx context.Context) *SubItem {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sic *SubItemCreate) defaults() {
	if _, ok := sic.mutation.ID(); !ok {
		v := subitem.DefaultID()
		sic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *SubItemCreate) check() error {
	if _, ok := sic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := sic.mutation.Name(); ok {
		if err := subitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New("ent: missing required field \"icon\"")}
	}
	if v, ok := sic.mutation.Icon(); ok {
		if err := subitem.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if _, ok := sic.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New("ent: missing required field \"link\"")}
	}
	if v, ok := sic.mutation.Link(); ok {
		if err := subitem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf("ent: validator failed for field \"link\": %w", err)}
		}
	}
	return nil
}

func (sic *SubItemCreate) sqlSave(ctx context.Context) (*SubItem, error) {
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (sic *SubItemCreate) createSpec() (*SubItem, *sqlgraph.CreateSpec) {
	var (
		_node = &SubItem{config: sic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subitem.FieldID,
			},
		}
	)
	if id, ok := sic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := sic.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := sic.mutation.Link(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldLink,
		})
		_node.Link = value
	}
	if nodes := sic.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subitem.ParentTable,
			Columns: []string{subitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubItemCreateBulk is the builder for creating many SubItem entities in bulk.
type SubItemCreateBulk struct {
	config
	builders []*SubItemCreate
}

// Save creates the SubItem entities in the database.
func (sicb *SubItemCreateBulk) Save(ctx context.Context) ([]*SubItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*SubItem, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *SubItemCreateBulk) SaveX(ctx context.Context) []*SubItem {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
