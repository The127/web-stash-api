// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"web-stash-api/ent/bag"
	"web-stash-api/ent/bagitem"
	"web-stash-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BagUpdate is the builder for updating Bag entities.
type BagUpdate struct {
	config
	hooks    []Hook
	mutation *BagMutation
}

// Where adds a new predicate for the BagUpdate builder.
func (bu *BagUpdate) Where(ps ...predicate.Bag) *BagUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BagUpdate) SetName(s string) *BagUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetIcon sets the "icon" field.
func (bu *BagUpdate) SetIcon(s string) *BagUpdate {
	bu.mutation.SetIcon(s)
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BagUpdate) SetUserID(u uuid.UUID) *BagUpdate {
	bu.mutation.SetUserID(u)
	return bu
}

// AddItemIDs adds the "items" edge to the BagItem entity by IDs.
func (bu *BagUpdate) AddItemIDs(ids ...uuid.UUID) *BagUpdate {
	bu.mutation.AddItemIDs(ids...)
	return bu
}

// AddItems adds the "items" edges to the BagItem entity.
func (bu *BagUpdate) AddItems(b ...*BagItem) *BagUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddItemIDs(ids...)
}

// Mutation returns the BagMutation object of the builder.
func (bu *BagUpdate) Mutation() *BagMutation {
	return bu.mutation
}

// ClearItems clears all "items" edges to the BagItem entity.
func (bu *BagUpdate) ClearItems() *BagUpdate {
	bu.mutation.ClearItems()
	return bu
}

// RemoveItemIDs removes the "items" edge to BagItem entities by IDs.
func (bu *BagUpdate) RemoveItemIDs(ids ...uuid.UUID) *BagUpdate {
	bu.mutation.RemoveItemIDs(ids...)
	return bu
}

// RemoveItems removes "items" edges to BagItem entities.
func (bu *BagUpdate) RemoveItems(b ...*BagItem) *BagUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BagUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BagUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BagUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BagUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := bag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := bu.mutation.Icon(); ok {
		if err := bag.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	return nil
}

func (bu *BagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bag.Table,
			Columns: bag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bag.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bag.FieldName,
		})
	}
	if value, ok := bu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bag.FieldIcon,
		})
	}
	if value, ok := bu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bag.FieldUserID,
		})
	}
	if bu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !bu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bag.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BagUpdateOne is the builder for updating a single Bag entity.
type BagUpdateOne struct {
	config
	hooks    []Hook
	mutation *BagMutation
}

// SetName sets the "name" field.
func (buo *BagUpdateOne) SetName(s string) *BagUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetIcon sets the "icon" field.
func (buo *BagUpdateOne) SetIcon(s string) *BagUpdateOne {
	buo.mutation.SetIcon(s)
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BagUpdateOne) SetUserID(u uuid.UUID) *BagUpdateOne {
	buo.mutation.SetUserID(u)
	return buo
}

// AddItemIDs adds the "items" edge to the BagItem entity by IDs.
func (buo *BagUpdateOne) AddItemIDs(ids ...uuid.UUID) *BagUpdateOne {
	buo.mutation.AddItemIDs(ids...)
	return buo
}

// AddItems adds the "items" edges to the BagItem entity.
func (buo *BagUpdateOne) AddItems(b ...*BagItem) *BagUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddItemIDs(ids...)
}

// Mutation returns the BagMutation object of the builder.
func (buo *BagUpdateOne) Mutation() *BagMutation {
	return buo.mutation
}

// ClearItems clears all "items" edges to the BagItem entity.
func (buo *BagUpdateOne) ClearItems() *BagUpdateOne {
	buo.mutation.ClearItems()
	return buo
}

// RemoveItemIDs removes the "items" edge to BagItem entities by IDs.
func (buo *BagUpdateOne) RemoveItemIDs(ids ...uuid.UUID) *BagUpdateOne {
	buo.mutation.RemoveItemIDs(ids...)
	return buo
}

// RemoveItems removes "items" edges to BagItem entities.
func (buo *BagUpdateOne) RemoveItems(b ...*BagItem) *BagUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveItemIDs(ids...)
}

// Save executes the query and returns the updated Bag entity.
func (buo *BagUpdateOne) Save(ctx context.Context) (*Bag, error) {
	var (
		err  error
		node *Bag
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BagUpdateOne) SaveX(ctx context.Context) *Bag {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BagUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BagUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BagUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := bag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := buo.mutation.Icon(); ok {
		if err := bag.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	return nil
}

func (buo *BagUpdateOne) sqlSave(ctx context.Context) (_node *Bag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bag.Table,
			Columns: bag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bag.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bag.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bag.FieldName,
		})
	}
	if value, ok := buo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bag.FieldIcon,
		})
	}
	if value, ok := buo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bag.FieldUserID,
		})
	}
	if buo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !buo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bag{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bag.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
