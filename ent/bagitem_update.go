// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"web-stash-api/ent/bag"
	"web-stash-api/ent/bagitem"
	"web-stash-api/ent/predicate"
	"web-stash-api/ent/subitem"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BagItemUpdate is the builder for updating BagItem entities.
type BagItemUpdate struct {
	config
	hooks    []Hook
	mutation *BagItemMutation
}

// Where adds a new predicate for the BagItemUpdate builder.
func (biu *BagItemUpdate) Where(ps ...predicate.BagItem) *BagItemUpdate {
	biu.mutation.predicates = append(biu.mutation.predicates, ps...)
	return biu
}

// SetName sets the "name" field.
func (biu *BagItemUpdate) SetName(s string) *BagItemUpdate {
	biu.mutation.SetName(s)
	return biu
}

// SetDescription sets the "description" field.
func (biu *BagItemUpdate) SetDescription(s string) *BagItemUpdate {
	biu.mutation.SetDescription(s)
	return biu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biu *BagItemUpdate) SetNillableDescription(s *string) *BagItemUpdate {
	if s != nil {
		biu.SetDescription(*s)
	}
	return biu
}

// ClearDescription clears the value of the "description" field.
func (biu *BagItemUpdate) ClearDescription() *BagItemUpdate {
	biu.mutation.ClearDescription()
	return biu
}

// SetIcon sets the "icon" field.
func (biu *BagItemUpdate) SetIcon(s string) *BagItemUpdate {
	biu.mutation.SetIcon(s)
	return biu
}

// SetLink sets the "link" field.
func (biu *BagItemUpdate) SetLink(s string) *BagItemUpdate {
	biu.mutation.SetLink(s)
	return biu
}

// SetImage sets the "image" field.
func (biu *BagItemUpdate) SetImage(s string) *BagItemUpdate {
	biu.mutation.SetImage(s)
	return biu
}

// SetBagID sets the "bag" edge to the Bag entity by ID.
func (biu *BagItemUpdate) SetBagID(id uuid.UUID) *BagItemUpdate {
	biu.mutation.SetBagID(id)
	return biu
}

// SetNillableBagID sets the "bag" edge to the Bag entity by ID if the given value is not nil.
func (biu *BagItemUpdate) SetNillableBagID(id *uuid.UUID) *BagItemUpdate {
	if id != nil {
		biu = biu.SetBagID(*id)
	}
	return biu
}

// SetBag sets the "bag" edge to the Bag entity.
func (biu *BagItemUpdate) SetBag(b *Bag) *BagItemUpdate {
	return biu.SetBagID(b.ID)
}

// AddSubItemIDs adds the "sub_items" edge to the SubItem entity by IDs.
func (biu *BagItemUpdate) AddSubItemIDs(ids ...uuid.UUID) *BagItemUpdate {
	biu.mutation.AddSubItemIDs(ids...)
	return biu
}

// AddSubItems adds the "sub_items" edges to the SubItem entity.
func (biu *BagItemUpdate) AddSubItems(s ...*SubItem) *BagItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return biu.AddSubItemIDs(ids...)
}

// Mutation returns the BagItemMutation object of the builder.
func (biu *BagItemUpdate) Mutation() *BagItemMutation {
	return biu.mutation
}

// ClearBag clears the "bag" edge to the Bag entity.
func (biu *BagItemUpdate) ClearBag() *BagItemUpdate {
	biu.mutation.ClearBag()
	return biu
}

// ClearSubItems clears all "sub_items" edges to the SubItem entity.
func (biu *BagItemUpdate) ClearSubItems() *BagItemUpdate {
	biu.mutation.ClearSubItems()
	return biu
}

// RemoveSubItemIDs removes the "sub_items" edge to SubItem entities by IDs.
func (biu *BagItemUpdate) RemoveSubItemIDs(ids ...uuid.UUID) *BagItemUpdate {
	biu.mutation.RemoveSubItemIDs(ids...)
	return biu
}

// RemoveSubItems removes "sub_items" edges to SubItem entities.
func (biu *BagItemUpdate) RemoveSubItems(s ...*SubItem) *BagItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return biu.RemoveSubItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BagItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(biu.hooks) == 0 {
		if err = biu.check(); err != nil {
			return 0, err
		}
		affected, err = biu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BagItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = biu.check(); err != nil {
				return 0, err
			}
			biu.mutation = mutation
			affected, err = biu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(biu.hooks) - 1; i >= 0; i-- {
			mut = biu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, biu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BagItemUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BagItemUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BagItemUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BagItemUpdate) check() error {
	if v, ok := biu.mutation.Name(); ok {
		if err := bagitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := biu.mutation.Icon(); ok {
		if err := bagitem.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if v, ok := biu.mutation.Link(); ok {
		if err := bagitem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf("ent: validator failed for field \"link\": %w", err)}
		}
	}
	if v, ok := biu.mutation.Image(); ok {
		if err := bagitem.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf("ent: validator failed for field \"image\": %w", err)}
		}
	}
	return nil
}

func (biu *BagItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bagitem.Table,
			Columns: bagitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bagitem.FieldID,
			},
		},
	}
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldName,
		})
	}
	if value, ok := biu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldDescription,
		})
	}
	if biu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bagitem.FieldDescription,
		})
	}
	if value, ok := biu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldIcon,
		})
	}
	if value, ok := biu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldLink,
		})
	}
	if value, ok := biu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldImage,
		})
	}
	if biu.mutation.BagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bagitem.BagTable,
			Columns: []string{bagitem.BagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bagitem.BagTable,
			Columns: []string{bagitem.BagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.SubItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bagitem.SubItemsTable,
			Columns: []string{bagitem.SubItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.RemovedSubItemsIDs(); len(nodes) > 0 && !biu.mutation.SubItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bagitem.SubItemsTable,
			Columns: []string{bagitem.SubItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.SubItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bagitem.SubItemsTable,
			Columns: []string{bagitem.SubItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bagitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BagItemUpdateOne is the builder for updating a single BagItem entity.
type BagItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *BagItemMutation
}

// SetName sets the "name" field.
func (biuo *BagItemUpdateOne) SetName(s string) *BagItemUpdateOne {
	biuo.mutation.SetName(s)
	return biuo
}

// SetDescription sets the "description" field.
func (biuo *BagItemUpdateOne) SetDescription(s string) *BagItemUpdateOne {
	biuo.mutation.SetDescription(s)
	return biuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (biuo *BagItemUpdateOne) SetNillableDescription(s *string) *BagItemUpdateOne {
	if s != nil {
		biuo.SetDescription(*s)
	}
	return biuo
}

// ClearDescription clears the value of the "description" field.
func (biuo *BagItemUpdateOne) ClearDescription() *BagItemUpdateOne {
	biuo.mutation.ClearDescription()
	return biuo
}

// SetIcon sets the "icon" field.
func (biuo *BagItemUpdateOne) SetIcon(s string) *BagItemUpdateOne {
	biuo.mutation.SetIcon(s)
	return biuo
}

// SetLink sets the "link" field.
func (biuo *BagItemUpdateOne) SetLink(s string) *BagItemUpdateOne {
	biuo.mutation.SetLink(s)
	return biuo
}

// SetImage sets the "image" field.
func (biuo *BagItemUpdateOne) SetImage(s string) *BagItemUpdateOne {
	biuo.mutation.SetImage(s)
	return biuo
}

// SetBagID sets the "bag" edge to the Bag entity by ID.
func (biuo *BagItemUpdateOne) SetBagID(id uuid.UUID) *BagItemUpdateOne {
	biuo.mutation.SetBagID(id)
	return biuo
}

// SetNillableBagID sets the "bag" edge to the Bag entity by ID if the given value is not nil.
func (biuo *BagItemUpdateOne) SetNillableBagID(id *uuid.UUID) *BagItemUpdateOne {
	if id != nil {
		biuo = biuo.SetBagID(*id)
	}
	return biuo
}

// SetBag sets the "bag" edge to the Bag entity.
func (biuo *BagItemUpdateOne) SetBag(b *Bag) *BagItemUpdateOne {
	return biuo.SetBagID(b.ID)
}

// AddSubItemIDs adds the "sub_items" edge to the SubItem entity by IDs.
func (biuo *BagItemUpdateOne) AddSubItemIDs(ids ...uuid.UUID) *BagItemUpdateOne {
	biuo.mutation.AddSubItemIDs(ids...)
	return biuo
}

// AddSubItems adds the "sub_items" edges to the SubItem entity.
func (biuo *BagItemUpdateOne) AddSubItems(s ...*SubItem) *BagItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return biuo.AddSubItemIDs(ids...)
}

// Mutation returns the BagItemMutation object of the builder.
func (biuo *BagItemUpdateOne) Mutation() *BagItemMutation {
	return biuo.mutation
}

// ClearBag clears the "bag" edge to the Bag entity.
func (biuo *BagItemUpdateOne) ClearBag() *BagItemUpdateOne {
	biuo.mutation.ClearBag()
	return biuo
}

// ClearSubItems clears all "sub_items" edges to the SubItem entity.
func (biuo *BagItemUpdateOne) ClearSubItems() *BagItemUpdateOne {
	biuo.mutation.ClearSubItems()
	return biuo
}

// RemoveSubItemIDs removes the "sub_items" edge to SubItem entities by IDs.
func (biuo *BagItemUpdateOne) RemoveSubItemIDs(ids ...uuid.UUID) *BagItemUpdateOne {
	biuo.mutation.RemoveSubItemIDs(ids...)
	return biuo
}

// RemoveSubItems removes "sub_items" edges to SubItem entities.
func (biuo *BagItemUpdateOne) RemoveSubItems(s ...*SubItem) *BagItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return biuo.RemoveSubItemIDs(ids...)
}

// Save executes the query and returns the updated BagItem entity.
func (biuo *BagItemUpdateOne) Save(ctx context.Context) (*BagItem, error) {
	var (
		err  error
		node *BagItem
	)
	if len(biuo.hooks) == 0 {
		if err = biuo.check(); err != nil {
			return nil, err
		}
		node, err = biuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BagItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = biuo.check(); err != nil {
				return nil, err
			}
			biuo.mutation = mutation
			node, err = biuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(biuo.hooks) - 1; i >= 0; i-- {
			mut = biuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, biuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BagItemUpdateOne) SaveX(ctx context.Context) *BagItem {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BagItemUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BagItemUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BagItemUpdateOne) check() error {
	if v, ok := biuo.mutation.Name(); ok {
		if err := bagitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := biuo.mutation.Icon(); ok {
		if err := bagitem.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if v, ok := biuo.mutation.Link(); ok {
		if err := bagitem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf("ent: validator failed for field \"link\": %w", err)}
		}
	}
	if v, ok := biuo.mutation.Image(); ok {
		if err := bagitem.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf("ent: validator failed for field \"image\": %w", err)}
		}
	}
	return nil
}

func (biuo *BagItemUpdateOne) sqlSave(ctx context.Context) (_node *BagItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bagitem.Table,
			Columns: bagitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bagitem.FieldID,
			},
		},
	}
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BagItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldName,
		})
	}
	if value, ok := biuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldDescription,
		})
	}
	if biuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: bagitem.FieldDescription,
		})
	}
	if value, ok := biuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldIcon,
		})
	}
	if value, ok := biuo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldLink,
		})
	}
	if value, ok := biuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bagitem.FieldImage,
		})
	}
	if biuo.mutation.BagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bagitem.BagTable,
			Columns: []string{bagitem.BagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bagitem.BagTable,
			Columns: []string{bagitem.BagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.SubItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bagitem.SubItemsTable,
			Columns: []string{bagitem.SubItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.RemovedSubItemsIDs(); len(nodes) > 0 && !biuo.mutation.SubItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bagitem.SubItemsTable,
			Columns: []string{bagitem.SubItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.SubItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bagitem.SubItemsTable,
			Columns: []string{bagitem.SubItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BagItem{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bagitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
