// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"web-stash-api/ent/bag"
	"web-stash-api/ent/bagitem"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BagCreate is the builder for creating a Bag entity.
type BagCreate struct {
	config
	mutation *BagMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BagCreate) SetName(s string) *BagCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetIcon sets the "icon" field.
func (bc *BagCreate) SetIcon(s string) *BagCreate {
	bc.mutation.SetIcon(s)
	return bc
}

// SetUserID sets the "user_id" field.
func (bc *BagCreate) SetUserID(u uuid.UUID) *BagCreate {
	bc.mutation.SetUserID(u)
	return bc
}

// SetID sets the "id" field.
func (bc *BagCreate) SetID(u uuid.UUID) *BagCreate {
	bc.mutation.SetID(u)
	return bc
}

// AddItemIDs adds the "items" edge to the BagItem entity by IDs.
func (bc *BagCreate) AddItemIDs(ids ...uuid.UUID) *BagCreate {
	bc.mutation.AddItemIDs(ids...)
	return bc
}

// AddItems adds the "items" edges to the BagItem entity.
func (bc *BagCreate) AddItems(b ...*BagItem) *BagCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddItemIDs(ids...)
}

// Mutation returns the BagMutation object of the builder.
func (bc *BagCreate) Mutation() *BagMutation {
	return bc.mutation
}

// Save creates the Bag in the database.
func (bc *BagCreate) Save(ctx context.Context) (*Bag, error) {
	var (
		err  error
		node *Bag
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BagCreate) SaveX(ctx context.Context) *Bag {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bc *BagCreate) defaults() {
	if _, ok := bc.mutation.ID(); !ok {
		v := bag.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BagCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := bc.mutation.Name(); ok {
		if err := bag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := bc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New("ent: missing required field \"icon\"")}
	}
	if v, ok := bc.mutation.Icon(); ok {
		if err := bag.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if _, ok := bc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	return nil
}

func (bc *BagCreate) sqlSave(ctx context.Context) (*Bag, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (bc *BagCreate) createSpec() (*Bag, *sqlgraph.CreateSpec) {
	var (
		_node = &Bag{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: bag.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bag.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bag.FieldIcon,
		})
		_node.Icon = value
	}
	if value, ok := bc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: bag.FieldUserID,
		})
		_node.UserID = value
	}
	if nodes := bc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bag.ItemsTable,
			Columns: []string{bag.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BagCreateBulk is the builder for creating many Bag entities in bulk.
type BagCreateBulk struct {
	config
	builders []*BagCreate
}

// Save creates the Bag entities in the database.
func (bcb *BagCreateBulk) Save(ctx context.Context) ([]*Bag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bag, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BagCreateBulk) SaveX(ctx context.Context) []*Bag {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
