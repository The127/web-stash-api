// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"web-stash-api/ent/bagitem"
	"web-stash-api/ent/predicate"
	"web-stash-api/ent/subitem"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubItemUpdate is the builder for updating SubItem entities.
type SubItemUpdate struct {
	config
	hooks    []Hook
	mutation *SubItemMutation
}

// Where adds a new predicate for the SubItemUpdate builder.
func (siu *SubItemUpdate) Where(ps ...predicate.SubItem) *SubItemUpdate {
	siu.mutation.predicates = append(siu.mutation.predicates, ps...)
	return siu
}

// SetName sets the "name" field.
func (siu *SubItemUpdate) SetName(s string) *SubItemUpdate {
	siu.mutation.SetName(s)
	return siu
}

// SetDescription sets the "description" field.
func (siu *SubItemUpdate) SetDescription(s string) *SubItemUpdate {
	siu.mutation.SetDescription(s)
	return siu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siu *SubItemUpdate) SetNillableDescription(s *string) *SubItemUpdate {
	if s != nil {
		siu.SetDescription(*s)
	}
	return siu
}

// ClearDescription clears the value of the "description" field.
func (siu *SubItemUpdate) ClearDescription() *SubItemUpdate {
	siu.mutation.ClearDescription()
	return siu
}

// SetIcon sets the "icon" field.
func (siu *SubItemUpdate) SetIcon(s string) *SubItemUpdate {
	siu.mutation.SetIcon(s)
	return siu
}

// SetLink sets the "link" field.
func (siu *SubItemUpdate) SetLink(s string) *SubItemUpdate {
	siu.mutation.SetLink(s)
	return siu
}

// SetParentID sets the "parent" edge to the BagItem entity by ID.
func (siu *SubItemUpdate) SetParentID(id uuid.UUID) *SubItemUpdate {
	siu.mutation.SetParentID(id)
	return siu
}

// SetNillableParentID sets the "parent" edge to the BagItem entity by ID if the given value is not nil.
func (siu *SubItemUpdate) SetNillableParentID(id *uuid.UUID) *SubItemUpdate {
	if id != nil {
		siu = siu.SetParentID(*id)
	}
	return siu
}

// SetParent sets the "parent" edge to the BagItem entity.
func (siu *SubItemUpdate) SetParent(b *BagItem) *SubItemUpdate {
	return siu.SetParentID(b.ID)
}

// Mutation returns the SubItemMutation object of the builder.
func (siu *SubItemUpdate) Mutation() *SubItemMutation {
	return siu.mutation
}

// ClearParent clears the "parent" edge to the BagItem entity.
func (siu *SubItemUpdate) ClearParent() *SubItemUpdate {
	siu.mutation.ClearParent()
	return siu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *SubItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(siu.hooks) == 0 {
		if err = siu.check(); err != nil {
			return 0, err
		}
		affected, err = siu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = siu.check(); err != nil {
				return 0, err
			}
			siu.mutation = mutation
			affected, err = siu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(siu.hooks) - 1; i >= 0; i-- {
			mut = siu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (siu *SubItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *SubItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *SubItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *SubItemUpdate) check() error {
	if v, ok := siu.mutation.Name(); ok {
		if err := subitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Icon(); ok {
		if err := subitem.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if v, ok := siu.mutation.Link(); ok {
		if err := subitem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf("ent: validator failed for field \"link\": %w", err)}
		}
	}
	return nil
}

func (siu *SubItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subitem.Table,
			Columns: subitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subitem.FieldID,
			},
		},
	}
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldName,
		})
	}
	if value, ok := siu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldDescription,
		})
	}
	if siu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subitem.FieldDescription,
		})
	}
	if value, ok := siu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldIcon,
		})
	}
	if value, ok := siu.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldLink,
		})
	}
	if siu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subitem.ParentTable,
			Columns: []string{subitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subitem.ParentTable,
			Columns: []string{subitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubItemUpdateOne is the builder for updating a single SubItem entity.
type SubItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *SubItemMutation
}

// SetName sets the "name" field.
func (siuo *SubItemUpdateOne) SetName(s string) *SubItemUpdateOne {
	siuo.mutation.SetName(s)
	return siuo
}

// SetDescription sets the "description" field.
func (siuo *SubItemUpdateOne) SetDescription(s string) *SubItemUpdateOne {
	siuo.mutation.SetDescription(s)
	return siuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (siuo *SubItemUpdateOne) SetNillableDescription(s *string) *SubItemUpdateOne {
	if s != nil {
		siuo.SetDescription(*s)
	}
	return siuo
}

// ClearDescription clears the value of the "description" field.
func (siuo *SubItemUpdateOne) ClearDescription() *SubItemUpdateOne {
	siuo.mutation.ClearDescription()
	return siuo
}

// SetIcon sets the "icon" field.
func (siuo *SubItemUpdateOne) SetIcon(s string) *SubItemUpdateOne {
	siuo.mutation.SetIcon(s)
	return siuo
}

// SetLink sets the "link" field.
func (siuo *SubItemUpdateOne) SetLink(s string) *SubItemUpdateOne {
	siuo.mutation.SetLink(s)
	return siuo
}

// SetParentID sets the "parent" edge to the BagItem entity by ID.
func (siuo *SubItemUpdateOne) SetParentID(id uuid.UUID) *SubItemUpdateOne {
	siuo.mutation.SetParentID(id)
	return siuo
}

// SetNillableParentID sets the "parent" edge to the BagItem entity by ID if the given value is not nil.
func (siuo *SubItemUpdateOne) SetNillableParentID(id *uuid.UUID) *SubItemUpdateOne {
	if id != nil {
		siuo = siuo.SetParentID(*id)
	}
	return siuo
}

// SetParent sets the "parent" edge to the BagItem entity.
func (siuo *SubItemUpdateOne) SetParent(b *BagItem) *SubItemUpdateOne {
	return siuo.SetParentID(b.ID)
}

// Mutation returns the SubItemMutation object of the builder.
func (siuo *SubItemUpdateOne) Mutation() *SubItemMutation {
	return siuo.mutation
}

// ClearParent clears the "parent" edge to the BagItem entity.
func (siuo *SubItemUpdateOne) ClearParent() *SubItemUpdateOne {
	siuo.mutation.ClearParent()
	return siuo
}

// Save executes the query and returns the updated SubItem entity.
func (siuo *SubItemUpdateOne) Save(ctx context.Context) (*SubItem, error) {
	var (
		err  error
		node *SubItem
	)
	if len(siuo.hooks) == 0 {
		if err = siuo.check(); err != nil {
			return nil, err
		}
		node, err = siuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = siuo.check(); err != nil {
				return nil, err
			}
			siuo.mutation = mutation
			node, err = siuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(siuo.hooks) - 1; i >= 0; i-- {
			mut = siuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, siuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *SubItemUpdateOne) SaveX(ctx context.Context) *SubItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *SubItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *SubItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *SubItemUpdateOne) check() error {
	if v, ok := siuo.mutation.Name(); ok {
		if err := subitem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Icon(); ok {
		if err := subitem.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf("ent: validator failed for field \"icon\": %w", err)}
		}
	}
	if v, ok := siuo.mutation.Link(); ok {
		if err := subitem.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf("ent: validator failed for field \"link\": %w", err)}
		}
	}
	return nil
}

func (siuo *SubItemUpdateOne) sqlSave(ctx context.Context) (_node *SubItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subitem.Table,
			Columns: subitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subitem.FieldID,
			},
		},
	}
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SubItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldName,
		})
	}
	if value, ok := siuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldDescription,
		})
	}
	if siuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subitem.FieldDescription,
		})
	}
	if value, ok := siuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldIcon,
		})
	}
	if value, ok := siuo.mutation.Link(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subitem.FieldLink,
		})
	}
	if siuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subitem.ParentTable,
			Columns: []string{subitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subitem.ParentTable,
			Columns: []string{subitem.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: bagitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subitem.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
